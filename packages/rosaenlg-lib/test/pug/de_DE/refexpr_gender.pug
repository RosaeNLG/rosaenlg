//- Copyright 2019 Ludan Stoecklé
//- SPDX-License-Identifier: Apache-2.0

-
  util.expected = `
    REFEXPR: das Handy N / REF: das hübsche Telefon N / AUTO: die Gurke F / das Telefon N / das Handy N
    AUTO: das hübsche Telefon N / die Gurke F / das Telefon N

    das hübsche Telefon N / das Handy N / die Gurke F / das Telefon N
    das hübsche Telefon N / das Handy N / die Gurke F / das Telefon N
    das Telefon N / das Handy N / die Gurke F / das Telefon N
  `;

//- explicit gender set
- var PRODUKT = {};
mixin produkt_ref(obj, params)
  | das hübsche Telefon
  - setRefGender(PRODUKT, 'N');
- PRODUKT.ref = produkt_ref;
mixin produkt_refexpr(obj, params)
  synz {mode:'sequence'}
    syn
      | das Handy
      - setRefGender(PRODUKT, 'N');
    syn
      | die Gurke
      - setRefGender(PRODUKT, 'F');
    syn
      | das Telefon
      - setRefGender(PRODUKT, 'N');
- PRODUKT.refexpr = produkt_refexpr;

//- exploit gender set but via dict
- var PRODUKT2 = {};
mixin produkt2_ref(obj, params)
  | das hübsche Telefon
  - setRefGender(PRODUKT2, 'Telefon');
- PRODUKT2.ref = produkt2_ref;
mixin produkt2_refexpr(obj, params)
  synz {mode:'sequence'}
    syn
      | das Handy
      - setRefGender(PRODUKT2, 'Handy');
    syn
      | die Gurke
      - setRefGender(PRODUKT2, 'Gurke');
    syn
      | das Telefon
      - setRefGender(PRODUKT2, 'Telefon');
- PRODUKT2.refexpr = produkt2_refexpr

//- value with represents
- var PRODUKT3 = {};
mixin produkt3_ref(obj, params)
  | das hübsche #[+value('Telefon', {represents: PRODUKT3})]
- PRODUKT3.ref = produkt3_ref;
mixin produkt3_refexpr(obj, params)
  synz {mode:'sequence'}
    syn
      | das #[+value('Handy', {represents: PRODUKT3})]
    syn
      | die #[+value('Gurke', {represents: PRODUKT3})]
    syn
      | das #[+value('Telefon', {represents: PRODUKT3})]
- PRODUKT3.refexpr = produkt3_refexpr

//- value with represents and det
- var PRODUKT4 = {};
mixin produkt4_ref(obj, params)
  | #[+value('Telefon', {represents: PRODUKT4, det: 'DEFINITE'})]
- PRODUKT4.ref = produkt4_ref;
mixin produkt4_refexpr(obj, params)
  synz {mode:'sequence'}
    syn
      //-| #[+value('Handy', {represents: PRODUKT4, det: 'DEFINITE'})]
      | #[+value('<der Handy>', {represents: PRODUKT4})]
    syn
      //-| #[+value('Gurke', {represents: PRODUKT4, det: 'DEFINITE'})]
      | #[+value('<der Gurke>', {represents: PRODUKT4})]
    syn
      //-| #[+value('Telefon', {represents: PRODUKT4, det: 'DEFINITE'})]
      | #[+value('<der Telefon>', {represents: PRODUKT4})]
- PRODUKT4.refexpr = produkt4_refexpr;

mixin valueDebugGender(obj, params)
  | #[+value(obj, params)] #{getRefGender(obj)}

t
  l
    itemz {separator: '/'}
      item 
        | REFEXPR : #[+valueDebugGender(PRODUKT, {REPRESENTANT: 'refexpr'})]
      item
        | REF : #[+valueDebugGender(PRODUKT, {REPRESENTANT: 'ref'})]
      item 
        | AUTO : #[+valueDebugGender(PRODUKT)]
      item
        | #[+valueDebugGender(PRODUKT)]
      item
        | #[+valueDebugGender(PRODUKT)]

  - resetRep(PRODUKT)
  l AUTO :
    eachz i in [0,1,2] with {separator: '/'}
      | #[+valueDebugGender(PRODUKT)]

  l
    eachz i in [0,1,2,3] with {separator: '/'}
      | #[+valueDebugGender(PRODUKT2)]
  l
    eachz i in [0,1,2,3] with {separator: '/'}
      | #[+valueDebugGender(PRODUKT3)]
  l
    eachz i in [0,1,2,3] with {separator: '/'}
      | #[+valueDebugGender(PRODUKT4)]

