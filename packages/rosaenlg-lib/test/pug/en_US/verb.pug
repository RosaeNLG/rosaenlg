//- Copyright 2019 Ludan StoecklÃ©
//- SPDX-License-Identifier: Apache-2.0
-
  util.expected = `
    Eats
    ate
    will eat
    eat
    ate
    will eat
    bent

    the toy looks
    the toy goes
    the toy swallows
    the toy ingests

    is swimming
    are listening
    have been letting
    will sleep
    will sleep
    are going to sleep

    eats, sleeps, eats, sleeps, eats
    eats, eats, eats, goes, sleeps

    SIMPLE_PAST => she ate, SIMPLE_PRESENT => she eats, SIMPLE_FUTURE => she will eat, PROGRESSIVE_PAST => she was eating, PROGRESSIVE_PRESENT => she is eating, PROGRESSIVE_FUTURE => she will be eating, PERFECT_PAST => she had eaten, PERFECT_PRESENT => she has eaten, PERFECT_FUTURE => she will have eaten, PERFECT_PROGRESSIVE_PAST => she had been eating, PERFECT_PROGRESSIVE_PRESENT => she has been eating, PERFECT_PROGRESSIVE_FUTURE => she will have been eating

    SIMPLE_PAST => she was, SIMPLE_PRESENT => she is, SIMPLE_FUTURE => she will be, PROGRESSIVE_PAST => she was being, PROGRESSIVE_PRESENT => she is being, PROGRESSIVE_FUTURE => she will be being, PERFECT_PAST => she had been, PERFECT_PRESENT => she has been, PERFECT_FUTURE => she will have been, PERFECT_PROGRESSIVE_PAST => she had been being, PERFECT_PROGRESSIVE_PRESENT => she has been being, PERFECT_PROGRESSIVE_FUTURE => she will have been being

    will swim
  `;

- var TOY = {};
mixin toy_ref(obj, params)
  | the toy
- TOY.ref = toy_ref;

-
  var subjS = getAnonymous('M', 'S');
  var subjP = getAnonymous('M', 'P');

t
  l #[+verb(subjS, 'eat')]
  l #[+verb(subjS, {verb: 'eat', tense: 'PAST'})]
  l #[+verb(subjS, {verb: 'eat', tense: 'FUTURE'})]
  l #[+verb(subjP, 'eat')]
  l #[+verb(subjP, {verb: 'eat', tense: 'PAST'})]
  l #[+verb(subjP, {verb: 'eat', tense: 'FUTURE'})]
  l #[+verb(subjP, {verb: 'bend', tense: 'PAST'})]
  //-l #[+verb(subjP, {verb: 'bend', tense: 'PAST', 'NEGATIVE':true })]

  l #[+subjectVerb(TOY, 'look')]
  l #[+subjectVerb(TOY, 'go')]
  l #[+subjectVerb(TOY, 'swallow')]
  l #[+subjectVerb(TOY, 'ingest')]

  //- new tenses available!
  l #[+verb(subjS, {verb: 'swim', tense: 'PROGRESSIVE_PRESENT'})]
  l #[+verb(subjP, {verb: 'listen', tense: 'PROGRESSIVE_PRESENT'})]
  l #[+verb(subjP, {verb: 'let', tense: 'PERFECT_PROGRESSIVE_PRESENT'})]
  l #[+verb(subjS, {verb: 'sleep', tense: 'SIMPLE_FUTURE'})]
  l #[+verb(subjS, {verb: 'sleep', tense: 'SIMPLE_FUTURE', WILL: true})]
  l #[+verb(subjP, {verb: 'sleep', tense: 'SIMPLE_FUTURE', GOING_TO: true})]

  //- list of verbs
  l
    eachz elt in [1,2,3,4,5] with { separator: ',', last_separator: ',' }
      | #[+verb(subjS, ['sleep', 'eat', 'go'])]
  l
    eachz elt in [1,2,3,4,5] with { separator: ',', last_separator: ',' }
      | #[+verb(subjS, {verb: ['sleep', 'eat', 'go']})]

  //- more global test
  -
    let tenses = [
      'SIMPLE_PAST', 
      'SIMPLE_PRESENT', 
      'SIMPLE_FUTURE', 
      'PROGRESSIVE_PAST', 
      'PROGRESSIVE_PRESENT', 
      'PROGRESSIVE_FUTURE', 
      'PERFECT_PAST', 
      'PERFECT_PRESENT', 
      'PERFECT_FUTURE', 
      'PERFECT_PROGRESSIVE_PAST', 
      'PERFECT_PROGRESSIVE_PRESENT', 
      'PERFECT_PROGRESSIVE_FUTURE'
    ];
  each verb in ['eat', 'be']
    l
      eachz tense in tenses with {separator: ','}
        | #{tense}
        | => she #[+verb(getAnonMS(), {verb: verb, tense: tense})]

  //- universal tenses
  l #[+verb(subjS, {verb: 'swim', tense: 'UNIVERSAL_FUTURE'})]
